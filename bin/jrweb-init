#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander')
const exists = require('fs').existsSync
const path = require('path')
const ora = require('ora')
const home = require('user-home')
const tildify = require('tildify')
const chalk = require('chalk')
const inquirer = require('inquirer')
const rm = require('rimraf').sync
const logger = require('../lib/logger')
const generate = require('../lib/generate')
const checkVersion = require('../lib/check-version')
const localPath = require('../lib/local-path')
const utils = require('../lib/utils')

const { isLocalPath, getTemplatePath } = localPath
const { printLogo, genConfig } = utils

/**
 * Usage.
 */
program
  .usage('<模板类型> [项目名称]')
  .option('--offline', '使用本地模板')

/**
 * Help.
 */
program.on('--help', () => {
  console.log('  示例:')
  console.log()
  console.log(chalk.gray('    # 使用线上模板创建项目'))
  console.log('    $ jrweb init pc my-project')
  console.log()
})

/**
 * LOGO
 */
printLogo()

/**
 * Help.
 */
function help () {
  program.parse(process.argv)
  if (program.args.length < 1) {
		return program.help()
	}
}
help()

/**
 * Settings.
 */
let type = program.args[0], template
const rawName = program.args[1]
const inPlace = !rawName || rawName === '.'
const name = inPlace ? path.relative('../', process.cwd()) : rawName
const to = path.resolve(rawName || '.')
const clone = /*program.clone || */false
// vue脚手架模板
if (type === 'vux') {
	template = 'wangyue/jr-vux-mobile'
}
// 微信模板
if (type === 'wx') {
	template = 'baofangliang/jr-webcommons'
}
// mui模板
if (type === 'mui') {
	template = 'baofangliang/jr-webcommons'
}
// pc模板
if (type === 'pc') {
	template = 'baofangliang/jr-webcommons'
}

const tmp = path.join(home, '.jrweb-templates', template.replace(/[\/:]/g, '-'))
if (program.offline) {
  console.log(`> 使用本地模板 ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}

/**
 * Padding.
 */
console.log()
process.on('exit', () => {
  console.log()
})

if (inPlace || exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? '是否在当前目录创建项目？'
      : '项目已存在，是否覆盖？',
    name: 'ok'
  }]).then(answers => {
    if (answers.ok) {
      run()
    }
  }).catch(logger.fatal)
} else {
  run()
}

/**
 * Check, download and generate the project.
 */
function run () {
  // check if template is local
  if (isLocalPath(template)) {
    const templatePath = getTemplatePath(template)
    if (exists(templatePath)) {
      generate(name, templatePath, to, err => {
        if (err) {
					logger.fatal(err)
				} else {
					console.log()
					logger.success('已生成项目 "%s".', name)
				}
      })
    } else {
      logger.fatal('本地模板 "%s" 不存在', template)
    }
  } else {
    checkVersion(() => {
      downloadAndGenerate(template)
    })
  }
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */
function downloadAndGenerate (template) {
  const spinner = ora('正在下载模板...')
	spinner.start()

	// Remove if local template exists
	if (exists(tmp)) {
		rm(tmp)
	}

  download(`gitlab:http://192.168.1.53:${template}#master`, tmp, { clone }, err => {
		spinner.stop()

		if (err) {
			logger.fatal(`下载模板失败 ${template}: ${err.message.trim()}`)
		} else {
			generate(name, tmp, to, err => {
				if (err) {
					logger.fatal(err)
				} else {
					console.log()
					genConfig(to, { name, type, template });
					logger.success('已生成项目 "%s".', name)
				}
			})
		}
  })
}
