#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander')
const exists = require('fs').existsSync
const path = require('path')
const ora = require('ora')
const home = require('user-home')
const tildify = require('tildify')
const chalk = require('chalk')
const rm = require('rimraf').sync
const logger = require('../lib/logger')
const checkVersion = require('../lib/check-version')
const localPath = require('../lib/local-path')
const utils = require('../lib/utils')
const generate = require('../lib/generate')

const { isLocalPath, getTemplatePath } = localPath
const { getConfig } = utils;

/**
 * Settings.
 */
const dir = path.resolve('.')
const clone = /*program.clone || */false

getConfig(dir, (err, conf) => {
	if (err) {
		logger.fatal(`读取配置失败 ${confPath}`);
	}
	upgrade(conf);
});


function upgrade({ name, type, template }) {
	const tmp = path.join(home, '.jrweb-templates', template.replace(/[\/:]/g, '-'))
	if (program.offline) {
		console.log(`> 使用本地模板 ${chalk.yellow(tildify(tmp))}`)
		template = tmp
	}

	// check if template is local
  if (isLocalPath(template)) {
		const templatePath = getTemplatePath(template)
		const to = path.join(dir, name);
    if (exists(templatePath)) {
			generate(name, tmp, to, err => {
				if (err) logger.fatal(err)
				console.log()
				logger.success('已更新模板 "%s".', type)
			}, false)
    } else {
      logger.fatal('本地模板 "%s" 不存在', template)
    }
  } else {
    checkVersion(() => {
      const spinner = ora('正在下载模板...')
			spinner.start()
			// Remove if local template exists
			if (exists(tmp)) rm(tmp)
			download(`gitlab:http://192.168.1.53:${template}#master`, tmp, { clone }, err => {
				spinner.stop()
				if (err) logger.fatal(`下载模板失败 ${template}: ${err.message.trim()}`)
				generate(name, tmp, to, err => {
					if (err) logger.fatal(err)
					console.log()
					logger.success('已更新模板 "%s".', type)
				}, false)
			})
    })
  }
}


/**
 * Padding.
 */
console.log()
process.on('exit', () => {
  console.log()
})
